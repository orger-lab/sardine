using System.Reflection;
using System.Reflection.Emit;

namespace Sardine.Core.Views
{
    public sealed class VesselViewModelGenerator
    {
        const string INTERNAL_ASSEMBLY_NAME = "AutoGeneratedVesselViewModels";

        private readonly AssemblyBuilder assemblyBuilder;
        private readonly ModuleBuilder moduleBuilder;
        private readonly Dictionary<Type, string[]> GettablesForType = [];
        private readonly object _viewModelGenerationLock = new();


        private Dictionary<Type, Type> KnownTypes { get; } = [];


        public VesselViewModelGenerator()
        {
            assemblyBuilder = AssemblyBuilder.DefineDynamicAssembly(new AssemblyName(INTERNAL_ASSEMBLY_NAME), AssemblyBuilderAccess.Run);
            moduleBuilder = assemblyBuilder.DefineDynamicModule("MainModule");
        }


        public VesselViewModel<T> GetVesselViewModel<T>(Vessel vesselHandle, bool updateOnlyWithEvents, int updaterInterval, bool updateOnlyValueTypeProperties, IList<IVesselPropertyToEventLink>? eventUpdatesCollection = null)
        {
            lock (_viewModelGenerationLock)
            {
                Type baseVesselType = typeof(T);

                TypeBuilder? typeBuilder = GenerateTypeBuilder(baseVesselType);

                if (typeBuilder is not null)
                {
                    FieldInfo vesselHandleField = typeof(VesselViewModel<>).MakeGenericType(baseVesselType).GetField("Vessel___", BindingFlags.Instance | BindingFlags.NonPublic)!;
                    MethodInfo vesselHandleGetMethod = vesselHandleField.FieldType.GetProperty("ObjectHandle")!.GetMethod!;

                    List<string> allGettablePropertiesNameList = [];

                    if (baseVesselType.IsValueType)
                    {
                        CodeGeneration.CreatePropertyForValueTypeVessel(typeBuilder, baseVesselType, vesselHandleField, vesselHandleGetMethod);
                        allGettablePropertiesNameList.Add("Value");
                    }
                    else
                    {
                        foreach (PropertyInfo property in baseVesselType.GetProperties())
                        {
                            if (updateOnlyValueTypeProperties && !property.PropertyType.IsValueType)
                                continue;

                            CodeGeneration.CreateProperty(
                                typeBuilder,
                                property.Name,
                                property.PropertyType,
                                property.CanWrite,
                                property.CanRead,
                                baseVesselType,
                                vesselHandleField,
                                vesselHandleGetMethod);

                            if (property.CanRead)
                                allGettablePropertiesNameList.Add(property.Name);
                        }
                    }

                    CodeGeneration.CreateConstructor(typeBuilder, baseVesselType);

                    Type? outType = typeBuilder.CreateType() ?? throw new VesselVMGenerationException($"Cannot create type {typeBuilder.Name}.");
                    KnownTypes.Add(baseVesselType, outType);
                    GettablesForType.Add(baseVesselType, [.. allGettablePropertiesNameList]);
                }

                object? viewModel = Activator.CreateInstance(
                    KnownTypes[baseVesselType],
                    vesselHandle,
                    GettablesForType[baseVesselType],
                    updateOnlyWithEvents,
                    updaterInterval,
                    eventUpdatesCollection ?? []) ?? throw new VesselVMGenerationException($"Cannot create viewmodel for {baseVesselType.Name}.");

                return (VesselViewModel<T>)viewModel;
            }
        }

        private TypeBuilder? GenerateTypeBuilder(Type baseVesselType)
        {
            if (moduleBuilder.GetType($"VesselViewModel_{baseVesselType.Name}") is not null)
                return null;

            TypeBuilder tb = moduleBuilder.DefineType($"VesselViewModel_{baseVesselType.Name}", TypeAttributes.Public |
                                                          TypeAttributes.Class |
                                                          TypeAttributes.AutoClass |
                                                          TypeAttributes.AnsiClass |
                                                          TypeAttributes.BeforeFieldInit |
                                                          TypeAttributes.AutoLayout |
                                                          TypeAttributes.Sealed,
                                                      typeof(VesselViewModel<>).MakeGenericType(baseVesselType));
            return tb;
        }
    }

}